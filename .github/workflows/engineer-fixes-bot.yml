name: Engineer Bot - PR Fixes
on:
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]
  repository_dispatch:
    types: ["üîß Fixes Required"]

jobs:
  engineer-fixes:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      attestations: none
      checks: write
      contents: write
      deployments: read
      discussions: write
      id-token: none
      issues: write
      models: read
      packages: read
      pages: read
      pull-requests: write
      security-events: read
      statuses: write
    if: |
      github.event_name == 'repository_dispatch' ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, 'ü§ñengineer')) ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, 'ü§ñengineer'))
    env:
      PR_NUMBER: ${{ github.event.client_payload.pr_number || github.event.pull_request.number || github.event.issue.number }}
      ISSUE_NUMBER: ${{ github.event.client_payload.issue_number || github.event.issue.number }}
    steps:
      - name: Check fix cycle limit
        id: cycle_check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.ISSUE_NUMBER }}
            });
            
            const engineerFixes = comments.filter(comment => 
              comment.body.includes('Engineer Bot - PR Fixes') ||
              comment.body.includes('üîß Fixes Applied')
            );
            
            const fixCount = engineerFixes.length;
            console.log(`Current fix cycle count: ${fixCount}`);
            
            if (fixCount >= 3) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ env.ISSUE_NUMBER }},
                body: `‚ö†Ô∏è **Maximum Fix Cycles Reached**\n\nThis PR has reached the maximum of 3 automated fix cycles. Human intervention is now required.\n\n**Next Steps:**\n- Manual review and fixes by a human developer\n- Consider simplifying the implementation approach\n- Review the feedback and requirements more carefully\n\n@convcha Please review this manually.`
              });
              
              core.setFailed('Maximum fix cycles (3) reached. Human intervention required.');
            }
            
            core.setOutput('fix_count', fixCount);
            core.setOutput('can_proceed', fixCount < 3);

      - name: Checkout repository
        if: steps.cycle_check.outputs.can_proceed == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust
        if: steps.cycle_check.outputs.can_proceed == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        if: steps.cycle_check.outputs.can_proceed == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        if: steps.cycle_check.outputs.can_proceed == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Get PR branch
        if: steps.cycle_check.outputs.can_proceed == 'true'
        id: pr_branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ env.PR_NUMBER }}
            });
            
            core.setOutput('branch_name', pr.head.ref);
            core.setOutput('head_sha', pr.head.sha);

      - name: Checkout PR branch
        if: steps.cycle_check.outputs.can_proceed == 'true'
        run: |
          git fetch origin ${{ steps.pr_branch.outputs.branch_name }}
          git checkout ${{ steps.pr_branch.outputs.branch_name }}

      - name: Run pre-fix quality checks
        if: steps.cycle_check.outputs.can_proceed == 'true'
        run: |
          echo "Running pre-fix quality checks..."
          cargo fmt --check || echo "fmt_check_failed=true" >> $GITHUB_ENV
          cargo clippy -- -D warnings || echo "clippy_check_failed=true" >> $GITHUB_ENV
          cargo test || echo "test_check_failed=true" >> $GITHUB_ENV
          cargo build --release || echo "build_check_failed=true" >> $GITHUB_ENV

      - uses: convcha/claude-code-action@main
        if: steps.cycle_check.outputs.can_proceed == 'true'
        env:
          RUST_VERSION: "stable"
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "30"
          allowed_tools: |
            [
              "Bash",
              "Glob",
              "Grep",
              "LS",
              "Read",
              "Edit",
              "MultiEdit",
              "Write",
              "Task",
              "GitHubCreateIssue",
              "GitHubEditIssue",
              "GitHubCloseIssue",
              "GitHubCreatePullRequest",
              "GitHubEditPullRequest",
              "GitHubGetIssue",
              "GitHubGetPullRequest",
              "GitHubListIssues",
              "GitHubListPullRequests",
              "GitHubSearchIssues",
              "GitHubAddLabelsToIssue",
              "GitHubRemoveLabelsFromIssue",
              "GitHubAddAssigneesToIssue",
              "GitHubRemoveAssigneesFromIssue",
              "GitHubCreateIssueComment",
              "GitHubUpdateIssueComment",
              "GitHubDeleteIssueComment",
              "GitHubListIssueComments",
              "GitHubCreatePullRequestReview",
              "GitHubCreatePullRequestReviewComment",
              "GitHubUpdatePullRequestReviewComment",
              "GitHubDeletePullRequestReviewComment",
              "GitHubListPullRequestReviewComments",
              "GitHubRequestPullRequestReviewers",
              "GitHubRemovePullRequestReviewRequest",
              "GitHubMergePullRequest",
              "GitHubAddLabelsToLabelable",
              "GitHubRemoveLabelsFromLabelable"
            ]
          disallowed_tools: |
            [
              "GitHubDeleteRepository",
              "GitHubCreateRepository",
              "GitHubUpdateRepository"
            ]
          custom_instructions: |
            You are an Engineer AI bot performing PR fixes as part of the Machiners Platoon AI development team.
            
            Your role is to address feedback and fix issues in pull requests for the rust-wc project (a Rust word count utility).
            
            Key responsibilities:
            1. **Issue Resolution**: Address specific feedback from code reviews
            2. **Quality Fixes**: Fix formatting, linting, and compilation issues
            3. **Test Fixes**: Ensure all tests pass and add missing tests
            4. **Code Improvements**: Implement suggested optimizations and best practices
            5. **Documentation Updates**: Update comments and documentation as needed
            
            Fix Standards for Rust:
            - Address all clippy warnings and errors
            - Ensure cargo fmt passes
            - Fix failing tests and add missing test coverage
            - Implement proper error handling
            - Follow Rust idioms and conventions
            - Maintain backward compatibility
            
            Process:
            1. Analyze the review feedback carefully
            2. Make targeted fixes to address each issue
            3. Ensure all quality checks pass
            4. Commit changes with clear messages
            5. Update the PR with fix summary
            
            Project Context:
            - CLI word count utility written in Rust
            - Uses getopts for command-line parsing
            - Focus on performance and reliability
          direct_prompt: |
            Please address the feedback and fix any issues in this pull request.
            
            Steps to follow:
            1. Read the PR review comments and understand the feedback
            2. Analyze the current code and identify issues to fix:
               - Review feedback points
               - Quality check failures (fmt, clippy, tests, build)
               - Code improvement suggestions
            3. Make targeted fixes:
               - Address each review comment specifically
               - Fix formatting and linting issues
               - Resolve test failures
               - Implement suggested improvements
               - Update documentation if needed
            4. Ensure all quality checks pass:
               - Run cargo fmt
               - Run cargo clippy with no warnings
               - Run cargo test with all tests passing
               - Verify cargo build succeeds
            5. Commit changes with descriptive messages
            6. Update the PR with a summary of fixes applied
            7. Request re-review from the System Architect Bot

      - name: Run post-fix quality checks
        if: steps.cycle_check.outputs.can_proceed == 'true'
        run: |
          echo "Running post-fix quality checks..."
          cargo fmt --check
          cargo clippy -- -D warnings
          cargo test
          cargo build --release

      - name: Track Claude execution cost
        if: steps.cycle_check.outputs.can_proceed == 'true'
        uses: ./.github/actions/claude-result-tracker
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ env.ISSUE_NUMBER }}
          cost-name: "Engineer Bot - PR Fixes"

      - name: Trigger Architect Re-review
        if: steps.cycle_check.outputs.can_proceed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          script: |
            // Add a comment to indicate fixes have been applied
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.ISSUE_NUMBER }},
              body: `üîß **Fixes Applied by Engineer Bot**\n\nAll review feedback has been addressed. Quality checks are now passing:\n- ‚úÖ Formatting (cargo fmt)\n- ‚úÖ Linting (cargo clippy)\n- ‚úÖ Tests (cargo test)\n- ‚úÖ Build (cargo build)\n\nRequesting re-review from System Architect Bot.`
            });
            
            // Trigger architect review
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: "üèóÔ∏è Architect PR Review",
              client_payload: {
                pr_number: ${{ env.PR_NUMBER }},
                issue_number: ${{ env.ISSUE_NUMBER }}
              }
            });