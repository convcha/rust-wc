name: Product Manager Bot - Issue Enhancement
on:
  issues:
    types: [labeled]

jobs:
  product-manager:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      attestations: none
      checks: write
      contents: write
      deployments: read
      discussions: write
      id-token: none
      issues: write
      models: read
      packages: read
      pages: read
      pull-requests: write
      security-events: read
      statuses: write
    if: |
      github.event.action == 'labeled' && github.event.label.name == 'ü§ñ Machiners Platoon'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: convcha/claude-code-action@main
        env:
          RUST_VERSION: "stable"
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "30"
          allowed_tools: |
            [
              "Bash",
              "Glob",
              "Grep",
              "LS",
              "Read",
              "Edit",
              "MultiEdit",
              "Write",
              "Task",
              "GitHubCreateIssue",
              "GitHubEditIssue",
              "GitHubCloseIssue",
              "GitHubCreatePullRequest",
              "GitHubEditPullRequest",
              "GitHubGetIssue",
              "GitHubGetPullRequest",
              "GitHubListIssues",
              "GitHubListPullRequests",
              "GitHubSearchIssues",
              "GitHubAddLabelsToIssue",
              "GitHubRemoveLabelsFromIssue",
              "GitHubAddAssigneesToIssue",
              "GitHubRemoveAssigneesFromIssue",
              "GitHubCreateIssueComment", 
              "GitHubUpdateIssueComment",
              "GitHubDeleteIssueComment",
              "GitHubListIssueComments",
              "GitHubCreatePullRequestReview",
              "GitHubCreatePullRequestReviewComment",
              "GitHubUpdatePullRequestReviewComment",
              "GitHubDeletePullRequestReviewComment",
              "GitHubListPullRequestReviewComments",
              "GitHubRequestPullRequestReviewers",
              "GitHubRemovePullRequestReviewRequest",
              "GitHubMergePullRequest",
              "GitHubAddLabelsToLabelable",
              "GitHubRemoveLabelsFromLabelable"
            ]
          disallowed_tools: |
            [
              "GitHubDeleteRepository",
              "GitHubCreateRepository",
              "GitHubUpdateRepository"
            ]
          custom_instructions: |
            You are a Product Manager AI bot working as part of the Machiners Platoon AI development team.
            
            Your role is to enhance issues by providing detailed requirements, acceptance criteria, and determining the next steps for implementation. You work with a Rust project (rust-wc - a word count utility).
            
            Key responsibilities:
            1. **Issue Enhancement**: Transform basic issue descriptions into comprehensive requirements with:
               - Clear problem statement
               - Detailed acceptance criteria
               - User stories if applicable
               - Technical considerations for Rust development
               - Dependencies and prerequisites
            
            2. **Complexity Assessment**: Determine if an issue requires:
               - Simple implementation (trigger Engineer Bot directly)
               - Complex architecture (trigger System Architect Bot first)
            
            3. **Stakeholder Communication**: Update the issue with enhanced details and clear next steps
            
            4. **Project Context**: This is a Rust word count utility project with dependencies on getopts for CLI parsing
            
            Always end your issue updates with a decision on next steps and appropriate bot triggering.
          direct_prompt: |
            Please analyze the issue that was just labeled with "ü§ñ Machiners Platoon" and enhance it with detailed requirements and acceptance criteria.
            
            Steps to follow:
            1. Read the current issue details
            2. Enhance the issue with:
               - Clear problem statement
               - Detailed acceptance criteria
               - Technical considerations for Rust development
               - Testing requirements
            3. Determine complexity level and next steps
            4. Update the issue with enhanced details
            5. Trigger appropriate next bot (System Architect for complex features, Engineer for simple fixes)

      - name: Track Claude execution cost
        uses: ./.github/actions/claude-result-tracker
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          cost-name: "Product Manager Bot"

      - name: Parse architecture decision
        id: parse_architecture_decision
        run: |
          echo "Parsing decision from issue comments..."
          
          # Get the latest comment from the Product Manager Bot
          LATEST_COMMENT=$(gh api "repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
            --jq '.[-1].body' | grep -E "(üèõÔ∏è|üõ†Ô∏è)" || echo "")
          
          if [[ "$LATEST_COMMENT" == *"üèõÔ∏è"* ]]; then
            echo "needs_architecture=true" >> $GITHUB_OUTPUT
            echo "Decision: Architecture review needed"
          elif [[ "$LATEST_COMMENT" == *"üõ†Ô∏è"* ]]; then
            echo "needs_implementation=true" >> $GITHUB_OUTPUT
            echo "Decision: Direct implementation"
          else
            echo "no_decision=true" >> $GITHUB_OUTPUT
            echo "No clear decision found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger System Architect Bot
        if: success() && steps.parse_architecture_decision.outputs.needs_architecture == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: "üèõÔ∏è Architecture Review",
              client_payload: {
                issue_number: context.payload.issue.number
              }
            });

      - name: Trigger Engineer Bot
        if: success() && steps.parse_architecture_decision.outputs.needs_implementation == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: "üõ†Ô∏è Lets Build This",
              client_payload: {
                issue_number: context.payload.issue.number
              }
            });