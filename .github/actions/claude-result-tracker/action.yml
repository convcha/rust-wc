name: "Claude Result Tracker"
description: "Parse Claude execution results and update issue with cost, duration, and token usage information"
inputs:
  github-token:
    description: "GitHub token for updating issues"
    required: true
  issue-number:
    description: "Issue number to update"
    required: true
  cost-name:
    description: "Name of the bot/workflow for result tracking"
    required: true
  cost-file-path:
    description: "Path to Claude execution output JSON file"
    required: false
    default: "/home/runner/work/_temp/claude-execution-output.json"
outputs:
  total-cost:
    description: "Total cost in USD"
    value: ${{ steps.parse-and-update.outputs.total_cost }}
runs:
  using: "composite"
  steps:
    - name: Parse Claude execution results and update issue
      id: parse-and-update
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const path = '${{ inputs.cost-file-path }}';

          // Helper function to format numbers with commas
          function formatNumber(num) {
            return Math.round(num).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
          }

          let totalCost = 0;
          let durationMinutes = 0;
          let totalInputTokens = 0;
          let outputTokens = 0;

          // Parse Claude execution results
          if (fs.existsSync(path)) {
            try {
              const fileContent = fs.readFileSync(path, 'utf8');
              const data = JSON.parse(fileContent);
              
              // Extract data from the "result" type object
              let resultObject;
              if (Array.isArray(data)) {
                resultObject = data.find(item => item.type === 'result');
              } else if (data.type === 'result') {
                resultObject = data;
              }

              if (resultObject && resultObject.data) {
                const resultData = resultObject.data;
                
                // Extract cost information
                if (resultData.usage) {
                  totalInputTokens = resultData.usage.input_tokens || 0;
                  outputTokens = resultData.usage.output_tokens || 0;
                  
                  // Calculate cost based on Claude 3.5 Sonnet pricing
                  // Input: $3 per million tokens, Output: $15 per million tokens
                  const inputCost = (totalInputTokens / 1000000) * 3;
                  const outputCost = (outputTokens / 1000000) * 15;
                  totalCost = inputCost + outputCost;
                }

                // Extract duration if available
                if (resultData.duration_ms) {
                  durationMinutes = Math.round(resultData.duration_ms / 60000 * 100) / 100;
                }
              }

              console.log(`Claude execution results parsed:
                - Total Cost: $${totalCost.toFixed(4)}
                - Duration: ${durationMinutes} minutes
                - Input Tokens: ${formatNumber(totalInputTokens)}
                - Output Tokens: ${formatNumber(outputTokens)}`);

            } catch (error) {
              console.error('Error parsing Claude execution results:', error);
              console.log('File content:', fs.readFileSync(path, 'utf8'));
            }
          } else {
            console.log('Claude execution results file not found at:', path);
          }

          // Update the issue with cost information
          try {
            const costComment = `## üí∞ ${{ inputs.cost-name }} - Execution Cost

**Cost Breakdown:**
- üíµ **Total Cost**: $${totalCost.toFixed(4)} USD
- ‚è±Ô∏è **Duration**: ${durationMinutes} minutes
- üìù **Input Tokens**: ${formatNumber(totalInputTokens)}
- üìÑ **Output Tokens**: ${formatNumber(outputTokens)}

---
*This cost tracking helps monitor AI usage and optimize workflows.*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt('${{ inputs.issue-number }}'),
              body: costComment
            });

            console.log('Cost information added to issue successfully');
          } catch (error) {
            console.error('Error updating issue with cost information:', error);
          }

          // Set output
          core.setOutput('total_cost', totalCost.toFixed(4));